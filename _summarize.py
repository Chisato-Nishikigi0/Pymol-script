import ast
import tempfile
import webbrowser
from collections import defaultdict
from glob import glob

from jinja2 import Template

FOUND = defaultdict(dict)


class Visitor1pass(ast.NodeVisitor):
    def __init__(self, module):
        self.module = module

    def visit_Call(self, call):
        if hasattr(call.func, 'attr') and call.func.attr == "extend":
            if len(call.args) == 2:
                if call.func.attr == "extend" and call.func.value.id == "cmd":
                    funcname = call.args[0].value
                    FOUND[self.module][funcname] = None


class Visitor2pass(ast.NodeVisitor):
    def __init__(self, module):
        self.module = module

    def visit_FunctionDef(self, functiondef):
        if functiondef.name in FOUND[self.module]:
            try:
                if isinstance(functiondef.body[0].value.value, str):
                    FOUND[self.module][functiondef.name] = functiondef.body[0].value.value
            except Exception as exc:
                pass


for module in [*glob("*.py"), *glob("plugins/*py")]:
    if module.startswith('_'):
        continue
    with open(module) as module_file:
        src = ''.join(module_file.readlines())
        tree = ast.parse(src)

        v = Visitor1pass(module)
        v.visit(tree)

        v = Visitor2pass(module)
        v.visit(tree)

    # module = ast.parse(src, filename=module)

tmpl = Template(
    """
        <header>
            <h1>Plugin Commmands for PyMOL</h1>
            <h2>Generated by Pedro Sousa Lacerda (pslacerda@gmail.com)
        </header>
        <body>
            
            {% for module in commands %}
                <h2>{{ module }}</h2>
                {% for command in commands[module] %}
                    <h3>{{ command }}</h3>
                    <pre>{{ commands[module][command] }}</pre>
                {% endfor %} 
            `{% endfor %}`
        </body>
""")
_, path = tempfile.mkstemp(suffix=".html")
with open(path, "w") as fd:
    fd.write(tmpl.render(commands=FOUND))
webbrowser.open(path)
